# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=50)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField()
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=75)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class BookingAirport(models.Model):
    id = models.BigAutoField(primary_key=True)
    airport_code = models.CharField(unique=True, max_length=20)
    airport_name = models.CharField(max_length=100)
    city = models.CharField(max_length=100)
    country = models.CharField(max_length=55)
    timezone = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'booking_airport'


class BookingBooking(models.Model):
    id = models.BigAutoField(primary_key=True)
    booking_date = models.DateTimeField()
    user_id = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'booking_booking'


class BookingFlight(models.Model):
    id = models.BigAutoField(primary_key=True)
    flight_number = models.CharField(max_length=20)
    airline = models.CharField(max_length=50)
    scheduled_time = models.DateTimeField()
    expected_time = models.DateTimeField(blank=True, null=True)
    is_departure = models.BooleanField()
    status = models.CharField(max_length=50)
    terminal = models.CharField(max_length=20)
    gate = models.CharField(max_length=20)
    arrival_airport = models.ForeignKey(BookingAirport, models.DO_NOTHING, blank=True, null=True)
    departure_airport = models.ForeignKey(BookingAirport, models.DO_NOTHING, related_name='bookingflight_departure_airport_set', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'booking_flight'


class BookingFlightSeat(models.Model):
    id = models.BigAutoField(primary_key=True)
    booking_id = models.ForeignKey(BookingBooking, models.DO_NOTHING)
    seat_id = models.ForeignKey('BookingSeat', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'booking_flight_seat'


class BookingJourney(models.Model):
    id = models.BigAutoField(primary_key=True)
    layover_duration = models.TimeField(blank=True, null=True)
    booking_id = models.ForeignKey(BookingBooking, models.DO_NOTHING)
    flight_id = models.ForeignKey(BookingFlight, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'booking_journey'


class BookingPassenger(models.Model):
    id = models.BigAutoField(primary_key=True)
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    dietary_requirements = models.TextField()
    baggage_weight = models.FloatField(blank=True, null=True)
    booking_id = models.ForeignKey(BookingBooking, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'booking_passenger'


class BookingSeat(models.Model):
    id = models.BigAutoField(primary_key=True)
    seat_number = models.CharField(max_length=10)
    is_taken = models.BooleanField()
    flight_id = models.ForeignKey(BookingFlight, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'booking_seat'


class DjangoContentType(models.Model):
    name = models.CharField(max_length=100)
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'
